TODO LIST
- add file location views
- submit and retrieve copy the entire map  without checking if a file has changed. For small files that isn't a
  problem, but for big files this is problematic. a practical solution could be the use of git. THis also can remove
  the dependency on libssh2 from the code and potentially removes a lot of code from the code base
  only partially true: still need to be able to execute remote commands, but at least all the file transfer code can
  removed
  apparently the git bash for windows contains a ssh.exe file (in "C:\Program Files\Git\usr\bin") with which i could
  successfully login on hopper.
  Here is a way to tell git which key to use: http://superuser.com/questions/232373/how-to-tell-git-which-private-key-to-use
  If we content with executing system commands for ssh with QProcess (http://stackoverflow.com/questions/3227767/how-to-run-a-system-command-in-qt)
  then the dependency on libssh2 can be completely removed. Git commands can be executed as a system command to,
  or by using libgit2 (https://libgit2.github.com)
  if this approach works well, the remote file location view may be removed.

  workflow:
  1) create local empty repo (only once)
     execute local commands
        cd /path/to/local/job/folder
        git init
     or
        git init /path/to/local/job/folder

  2) save locally (possibly many times)
     execute local commands (in the local folder)
        git add .
        git commit -a -m "..."

  3) create remote empty repo (only once)
     execute remote commands (in the remote directory)
        git init
        git config receive.denyCurrentBranch ignore
        (The last command is to avoid the error below)
     or
         git init /path/to/remote/job/folder
         git config receive.denyCurrentBranch ignore --file /path/to/remote/job/folder/.git/config
     and execute local command (in local directory)
        git remote add origin /path/to/remote/job/folder

  4) synchronize:
     execute local command (in local directory)
         git push master origin
     execute remote command (in remote directory) (see error below)
         git reset --hard

  etijskens@etijskens [525] ~/qws/git-testje$ git push origin master
  Counting objects: 3, done.
  Delta compression using up to 8 threads.
  Compressing objects: 100% (2/2), done.
  Writing objects: 100% (3/3), 217 bytes | 0 bytes/s, done.
  Total 3 (delta 0), reused 0 (delta 0)
  remote: error: refusing to update checked out branch: refs/heads/master
  remote: error: By default, updating the current branch in a non-bare repository
  remote: error: is denied, because it will make the index and work tree inconsistent
  remote: error: with what you pushed, and will require 'git reset --hard' to match
  remote: error: the work tree to HEAD.
  remote: error:
  remote: error: You can set 'receive.denyCurrentBranch' configuration variable to
  remote: error: 'ignore' or 'warn' in the remote repository to allow pushing into
  remote: error: its current branch; however, this is not recommended unless you
  remote: error: arranged to update its work tree to match what you pushed in some
  remote: error: other way.
  remote: error:
  remote: error: To squelch this message and still keep the default behaviour, set
  remote: error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.
  To ssh://vsc20170@login.hpc.uantwerpen.be:/scratch/antwerpen/201/vsc20170/git-testje/.git
   ! [remote rejected] master -> master (branch is currently checked out)
  error: failed to push some refs to 'ssh://vsc20170@login.hpc.uantwerpen.be:/scratch/antwerpen/201/vsc20170/git-testje/.git'

- test template
- test session new/open/save/save as
- bug fix: templates folder is missing.

- convert jobs between clusters...

? bring script and resource parameters together on same page. Perhaps not a good idea. Now there is a clear mechanism
  to update either of the pages when the other has changed (i.e. the page change). connecting the resources update to
  the textChange() signal is perhaps not a very good idea and there is not much added value. ...

- must retrieve be a tab page or a menu item? or both?

- add checkpointing of jobs
- show contents local+remote job folder
- progress bar for obtaining connection, copying back and forth
- fix compile time warnings on macosx

- win32 version
- windows 8 version
- windows 10 version
- linux version

- script syntax highlighting

- update mechanism for .info files
  ?pick up most recent version from cluster itself?
  if that is feasible, we might provide a link to the newest Launcher version as well.

- add mpi functionality


- add icon to mac application
  https://iconverticons.com/online/

DONE (reverse chronological order)
==================================
2015-12-18
- new gui with menu and new/open/save/save as menu items
- removed the job management items
- dont show joblist, qstat -u output is sufficient and appears on single line -> simple selection...
  not exactly true, because finished jobs do not disappear from the qstat -u output after only a short period.
2015-11-24
- bug fix: save button shows unsaved changes at startup
- remove automatic save on submit
- bug fix in window title (user not shown in title after authentication)
- bug fix FINISHED line shown in script after save.

2015-11-20
- hide authentication details
- hide local+remote file location
- "project folder" rather than "subfolder".
2015-11-16
- session management added new/open/save (session = config file, *.data), launcher.cfg used to store
  the path to the session config.
- public key no longer needed (solve issues noted by franky, see his email of 2015-11-12)
- username and private_key are stored in session file only after successfull authentication
- no user input requested before the main Launcher window is up and running

2015-11-12
- improved error handling with authentication.

2015-11-11
- templates:
  . could be implemented as session config files : not a good idea, script is not
    in config file, on script parameters
  . as a complete job with some functionality to copy the entire directory (including
    any input files)
- delete job must kill it if not finished

2015-11-10
- bug fix: getaddrinfo failing on windows 7
  see http://www.cplusplus.com/forum/windows/41339/
- bug fix: CRLF->LF conversion on windows
- add a dummy entry at the beginning of the module list
- make ExecuteRemoteCommand a member of ssh2::Session instead of of MainWindow
  in this way the commands executed by sftp_get/put_file/dir can be wrapped too.
- intercept “internet connection but no vpn”
- intercept “no internet connection”

2015-11-07
- bug fix: sftp_put_dir writes only one memory block (mem)
2015-11-06
- add hello world example
- bug fix: authentication lost after
  after authenticate, wUsername gets focus again and generates another on_wUsername_EditingFinished event
  wich accidentally called ssh2::Session::reset()
- bug fix: the user can select the output of the qstat -u command as if it was a job,
  because it started also with ">>>"

2015-11-05ß
- cut off log file

2015-11-04
- bug fix: git revision of pure tag leads to version unknown.
- bug fix: mkdir -p fails : ssh2::Session::autoOpen not set
- set local file location by default to ~/Launcher
      subfolder to [~/Launcher/]jobs
      job_name to hello_world_example
- bug fix: select jobname possible without subfolder?
  > QDir::cleanPath(...) added to test whether selections are indeed descendents of subfolder, resp. local file location.

2015-10-30
- wall time format has now two decimals to avoid confusion: 1,000 hours = 1 hour and not 1000 hours
- windows 7 64bit distribution working

2015-10-28
- bug fix: from retrieve page to script page script is not shown
- bug fix: sftp_get_dir cannot handle remote environment variables, replace $VSC_xxx in joblist
- bug fix: save on page script not working for commands added
- bug fix: delete selected job not working
- bug fix: touch finished.<jobid> not automatically added to existing scripts, when they are not modified.
- bug fix: test for finished.<jobid> requires long id, not just the number
- bug fix: reload not working
- make remote commands insensitive to user environment.
- when is a job finished?
  (when finished.<jobid> exists in the remote directory) and ( (the job is in stat, marked as completed) or (the job is not in stat) ) 


